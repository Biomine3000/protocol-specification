BUSINESS OBJECT MESSAGE FORMAT
  JSON metadata in UTF-8 encoding
  NULL byte ('\0')
  PAYLOAD (raw bytes)

 • JSON metadata is rather arbitrary
 • PAYLOAD can be omitted (in which case the message ends with the NULL
   byte).
 • If PAYLOAD is not omitted, metadata must contain fields:
    - "type" to define how payload should be interpreted
    - "size" to define payload size  

----------------------------------------------------
BUSINESS OBJECT TOP-LEVEL PROPERTIES
 -"type":  (mime)type of payload 
 -"size":  size of payload 
 -"event": one of EVENT TYPES described below (none if object is just some content)
 -"sender":  arbitrary string to be reported as the sender of the object by receiving clients.
             In traditional IRC toxonomy this this would correspond to the user; it could also be a name
             of a service, or a e.g. a combination of service and user names. 
 -"id":    An id uniquely identifying an object. Semantics to be defined. 
 
EVENT TYPES
 - "client/register" - register a client to the server. possible services
      implemented by the client will be registered separately as "services/register" events.
     • "receive" - one of: 
        * "none": nothing will be sent to the client by server
        * "all": everything will be sent
        * "no_echo": everything but objects sent by client itself  
        * "events_only": events only (recall that events may include no or arbitrary CONTENT)
     • "subscribe" - a json array of CONTENT types that client is willing to receive. Note that
       this does not consider event types; all events will be received, irrespective of their type
       (and even irrespective of any potential content included as payload!) 
        * "all" to receive everything (default); this is not an json array, but an string literal instead
        * "none" to receive nothing; ; this is not an json array, but an string literal instead
        * trivial bash-style wildcards could be supported at some point  
     • "name" - name of the client program, e.g. "java-tv". optional 
        and purely informational; not used by protocol
     • "user" - name of the user running the program. optional and purely 
        informational; not used by protocol 
     • "unique-routing-id" - a client must have an id to receive targeted messages from services.
       if no id, a server will provide one (maybe also informing the client
       of its new id). Maybe client could include the id in each request, instead of registering
       it t  
     • "routing-ids": a list of additional id:s based on which events shall be routed
        to the client           
    
 - "services/register"
      • "name"
 - "services/unregister" (closing connection naturally also unregisters)
      • "name" (if no name, unregister all services of client)    
 - "services/list" 
 - "error"
 
 